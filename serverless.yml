service: bookchain

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource:
          "*" # TODO: Restrict this
  httpApi:
    cors: true

plugins:
  - serverless-stack-output
  - serverless-webpack

custom:
  output:
   file: devops/outputs/serverlessOutputs.json
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules: true

functions:
  addBook:
    handler: ./src/functions/addBook.handler
    timeout: 20
    events:
      - httpApi:
          path: /books/{bookId}
          method: put
    environment:
      USER_ID: ${file(./kaleidoConfig.json):userId}
      PASSWORD: ${file(./kaleidoConfig.json):password}
      KALEIDO_GENERATED_API: ${file(./devops/outputs/kaleidoOutputs.json):generatedApiUrl}
      CONTRACT_ADDRESS: ${file(./devops/outputs/kaleidoOutputs.json):contractAddress}
      DYNAMO_TABLE_NAME: bookchain-${opt:stage}-storage
  listBooks:
    handler: ./src/functions/listBooks.handler
    timeout: 20
    events:
      - httpApi:
          path: /books
          method: get
    environment:
      DYNAMO_TABLE_NAME: bookchain-${opt:stage}-storage
  getBook:
    handler: ./src/functions/getBook.handler
    timeout: 20
    events:
      - httpApi:
          path: /books/{bookId}
          method: get
    environment:
      DYNAMO_TABLE_NAME: bookchain-${opt:stage}-storage
  addBookRecord:
    handler: ./src/functions/addBookRecord.handler
    timeout: 20
    events:
      - httpApi:
          path: /books/{bookId}/records
          method: post
    environment:
      USER_ID: ${file(./kaleidoConfig.json):userId}
      PASSWORD: ${file(./kaleidoConfig.json):password}
      KALEIDO_GENERATED_API: ${file(./devops/outputs/kaleidoOutputs.json):generatedApiUrl}
      CONTRACT_ADDRESS: ${file(./devops/outputs/kaleidoOutputs.json):contractAddress}
  borrowedWebhook:
    handler: ./src/functions/borrowedWebhook.handler
    timeout: 20
    events:
      - httpApi:
          path: /webhook/borrowed
          method: post
    environment:
      DYNAMO_TABLE_NAME: bookchain-${opt:stage}-storage
  returnedWebhook:
    handler: ./src/functions/returnedWebhook.handler
    timeout: 20
    events:
      - httpApi:
          path: /webhook/returned
          method: post
    environment:
      DYNAMO_TABLE_NAME: bookchain-${opt:stage}-storage
  listBookRecords:
    handler: ./src/functions/listBookRecords.handler
    timeout: 20
    events:
      - httpApi:
          path: /books/{bookId}/records
          method: get
    environment:
      DYNAMO_TABLE_NAME: bookchain-${opt:stage}-storage
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:

    # From: https://github.com/forestryio/cloudformation-templates/blob/35179ceaa0d0b12a5e4560fe69f774adcca6f875/static-site-hosting/basic-s3-cloudfront.yml
    # Create the bucket to contain the website HTML
    S3Bucket:
      Type: 'AWS::S3::Bucket'

    # Configure the bucket as a CloudFront Origin
    ReadPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
    CloudFrontOriginAccessIdentity:
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Ref S3Bucket
    CloudFrontDistribution:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          CustomErrorResponses:
          - ErrorCode: 403 # this will redirect back to the react app
            ResponseCode: 200
            ResponsePagePath: "/index.html"
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            CachedMethods:
            - GET
            - HEAD
            - OPTIONS
            Compress: true
            DefaultTTL: 3600 # in seconds
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: false
            MaxTTL: 86400 # in seconds
            MinTTL: 60 # in seconds
            TargetOriginId: s3origin
            ViewerProtocolPolicy: 'allow-all'
          DefaultRootObject: "index.html"
          Enabled: true
          HttpVersion: http2
          Origins:
          - DomainName: !GetAtt 'S3Bucket.DomainName'
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
          PriceClass: 'PriceClass_All'

    # Create an IAM user with Access Keys to enable automated deployment of the website to this bucket
    PublishUser:
      Type: 'AWS::IAM::User'
      Properties:
        Policies:
          - PolicyName: !Sub 'publish-to-${S3Bucket}'
            PolicyDocument:
              Statement:
              - Action: 's3:*'
                Effect: Allow
                Resource: 
                - !Sub 'arn:aws:s3:::${S3Bucket}'
                - !Sub 'arn:aws:s3:::${S3Bucket}/*'
    PublishCredentials:
      Type: 'AWS::IAM::AccessKey'
      Properties:
        UserName: !Ref PublishUser
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bookchain-${opt:stage}-storage
        AttributeDefinitions:
        - AttributeName: hash_key
          AttributeType: S
        - AttributeName: range_key
          AttributeType: S
        - AttributeName: gsi
          AttributeType: S
        KeySchema:
        - AttributeName: hash_key
          KeyType: HASH
        - AttributeName: range_key
          KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: SecondaryIndex
            KeySchema:
            - AttributeName: gsi
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
  Outputs:
    BucketName:
      Description: 'S3 Bucket Name'
      Value: !Ref S3Bucket
    AccessKeyId:
      Description: 'S3 Access Key'
      Value: !Ref PublishCredentials
    AccessKeySecret:
      Description: 'S3 Secret Key'
      Value: !GetAtt PublishCredentials.SecretAccessKey
    DistributionId:
      Description: 'CloudFront Distribution ID'
      Value: !Ref CloudFrontDistribution
    Domain:
      Description: 'Cloudfront Domain'
      Value: !GetAtt CloudFrontDistribution.DomainName